library("jsonlite")
library("data.table")
library("anytime")
api_key <- "48117c0ecf634911606919eb86d9deb2"
api_url <- "http://api.eia.gov/series/?api_key={api_key}&series_id=PET.MCRFP{state_abb}2.M"
format_eia_url <- function(state_abb) {
glue(api_url, api_key = api_key, state_abb = state_abb)
}
get_eia_response <- function(state_abb) {
url <- format_eia_url(state_abb)
res <- GET(url)
return(res)
}
response_to_json <- function(res) {
json <- fromJSON(rawToChar(res$content))
return(json)
}
json_to_data <- function(json) {
.data <- json$series$data
return(.data)
}
rename_columns <- function(DT) {
old <- names(DT)
.new <- c("date", "barrel")
setnames(DT, old = old, new = .new)
}
all_cols_to_char <- function(DT) {
for (j in names(DT))
set(DT, j = j, value = as.character(DT[[j]]))
}
convert_date_col <- function(DT) {
DT[, date := anydate(date)]
}
format_data <- function(.data) {
setDT(.data)
rename_columns(.data)
all_cols_to_char(.data)
convert_date_col(.data)
}
run <- function(state_abb) {
res <- get_eia_response(state_abb)
json <- response_to_json(res)
.data <- json_to_data(json)
DT <- format_data(.data)
return(DT)
}
state_abb_to_name <- function(state_abb) {
state_name <- toupper(state.name[which(state.abb == state_abb)])
return(state_name)
}
state_abbs <- c("TX", "ND", "SD", "CO", "MT", "NE", "NM", "WY", "PA", "WV", "OH", "NY", "LA", "OK", "AR")
results <- sapply(state_abbs, run, USE.NAMES = TRUE, simplify = F)
DT <- rbindlist(results, use.names = TRUE, idcol = "state_abb")
DT[, state := state_abb_to_name(state_abb), by = .(state_abb)]
DT[, year := year(date)]
setcolorder(DT, c('state_abb', 'state', 'year', 'date', 'barrel'))
write.table(DT, "clipboard-99999", row.names = F, sep = "\t")
library("glue")
library("httr")
library("jsonlite")
library("data.table")
library("anytime")
api_key <- "48117c0ecf634911606919eb86d9deb2"
api_url <- "http://api.eia.gov/series/?api_key={api_key}&series_id=PET.MCRFP{state_abb}2.M"
format_eia_url <- function(state_abb) {
glue(api_url, api_key = api_key, state_abb = state_abb)
}
get_eia_response <- function(state_abb) {
url <- format_eia_url(state_abb)
res <- GET(url)
return(res)
}
response_to_json <- function(res) {
json <- fromJSON(rawToChar(res$content))
return(json)
}
json_to_data <- function(json) {
.data <- json$series$data
return(.data)
}
rename_columns <- function(DT) {
old <- names(DT)
.new <- c("date", "barrel")
setnames(DT, old = old, new = .new)
}
all_cols_to_char <- function(DT) {
for (j in names(DT))
set(DT, j = j, value = as.character(DT[[j]]))
}
convert_date_col <- function(DT) {
DT[, date := anydate(date)]
}
format_data <- function(.data) {
setDT(.data)
rename_columns(.data)
all_cols_to_char(.data)
convert_date_col(.data)
}
run <- function(state_abb) {
res <- get_eia_response(state_abb)
json <- response_to_json(res)
.data <- json_to_data(json)
DT <- format_data(.data)
return(DT)
}
state_abb_to_name <- function(state_abb) {
state_name <- toupper(state.name[which(state.abb == state_abb)])
return(state_name)
}
state_abbs <- c("TX", "ND", "SD", "CO", "MT", "NE", "NM", "WY", "PA", "WV", "OH", "NY", "LA", "OK", "AR")
results <- sapply(state_abbs, run, USE.NAMES = TRUE, simplify = F)
DT <- rbindlist(results, use.names = TRUE, idcol = "state_abb")
DT[, state := state_abb_to_name(state_abb), by = .(state_abb)]
DT[, year := year(date)]
setcolorder(DT, c('state_abb', 'state', 'year', 'date', 'barrels_per_day'))
write.table(DT, "clipboard-99999", row.names = F, sep = "\t")
setcolorder(DT, c('state_abb', 'state', 'year', 'date', 'barrel'))
write.table(DT, "clipboard-99999", row.names = F, sep = "\t")
head(DT)
setnames(DT, "barrel", "barrels_per_day")
DT[, .(avg_barrels_per_day = mean(barrels_per_day)), .(state_abb, state, year)]
DT[, .(avg_barrels_per_day = mean(barrels_per_day)), by = .(state_abb, state, year)]
head(DT)
DT[, barrels_per_day := as.numeric(barrels_per_day)]
DT[, .(avg_barrels_per_day = mean(barrels_per_day)), by = .(state_abb, state, year)]
to_clip <- function(.data) {
write.table(.data, "clipboard-99999", sep = "\t", row.names = F)
}
to_clip(DT[, .(avg_barrels_per_day = mean(barrels_per_day)), by = .(state_abb, state, year)])
library("glue")
library("httr")
library("jsonlite")
library("data.table")
library("anytime")
to_clip <- function(.data) {
write.table(.data, "clipboard-99999", sep = "\t", row.names = F)
}
api_key <- "48117c0ecf634911606919eb86d9deb2"
api_url <- "http://api.eia.gov/series/?api_key={api_key}&series_id=PET.MCRFP{state_abb}1.M"
format_eia_url <- function(state_abb) {
glue(api_url, api_key = api_key, state_abb = state_abb)
}
get_eia_response <- function(state_abb) {
url <- format_eia_url(state_abb)
res <- GET(url)
return(res)
}
response_to_json <- function(res) {
json <- fromJSON(rawToChar(res$content))
return(json)
}
json_to_data <- function(json) {
.data <- json$series$data
return(.data)
}
rename_columns <- function(DT) {
old <- names(DT)
.new <- c("date", "barrel")
setnames(DT, old = old, new = .new)
}
all_cols_to_char <- function(DT) {
for (j in names(DT))
set(DT, j = j, value = as.character(DT[[j]]))
}
convert_date_col <- function(DT) {
DT[, date := anydate(date)]
}
format_data <- function(.data) {
setDT(.data)
rename_columns(.data)
all_cols_to_char(.data)
convert_date_col(.data)
}
run <- function(state_abb) {
res <- get_eia_response(state_abb)
json <- response_to_json(res)
.data <- json_to_data(json)
DT <- format_data(.data)
return(DT)
}
state_abb_to_name <- function(state_abb) {
state_name <- toupper(state.name[which(state.abb == state_abb)])
return(state_name)
}
state_abbs <- c("TX", "ND", "SD", "CO", "MT", "NE", "NM", "WY", "PA", "WV", "OH", "NY", "LA", "OK", "AR")
results <- sapply(state_abbs, run, USE.NAMES = TRUE, simplify = F)
DT <- rbindlist(results, use.names = TRUE, idcol = "state_abb")
DT[, state := state_abb_to_name(state_abb), by = .(state_abb)]
DT[, year := year(date)]
setcolorder(DT, c('state_abb', 'state', 'year', 'date', 'barrel'))
write.table(DT, "clipboard-99999", row.names = F, sep = "\t")
to_clip(DT[, .(barrels = sum(barrels)), by = .(state_abb, state, year)])
DT
setnames(DT, "barrel", "barrels")
DT
to_clip(DT[, .(barrels = sum(barrels)), by = .(state_abb, state, year)])
DT[, .(barrels = sum(barrels)), by = .(state_abb, state, year)]
DT[, barrels := as.numeric(barrels)]
to_clip(DT[, .(barrels = sum(barrels)), by = .(state_abb, state, year)])
dt <- read.table("clipboard", header = TRUE, row.names = NULL)
dt
setDT(dt)
str(dt)
library(forecast)
install.packages("forecast")
dt <- read.table("clipboard", header = TRUE, row.names = NULL)
dt <- read.table("clipboard", header = TRUE, row.names = NULL)
dt <- read.table("clipboard", header = TRUE, row.names = NULL)
dt
setDT(dt)
library(forecast)
train_dt <- copy(dt)
rm(dt)
train_dt
test_dt <- read.table("clipboard", header = TRUE, row.names = NULL)
test_dt
train_dt
setDT(test_dt)
fit <- auto.arima(train_dt$acres, xreg = train_dt[[c("year", "monthly_avg_oil_bpd")]], lambda = 0)
fit <- auto.arima(train_dt$acres, xreg = train_dt[ .(year, monthly_avg_oil_bpd)], lambda = 0)
train_ts < ts(train_dt)
train_ts <- ts(train_dt)
train_dt
train_ts
fit <- auto.arima(train_dt$acres, xreg = train_dt[[c("year", "monthly_avg_oil_bpd")]], lambda = 0)
fit <- auto.arima(train_dt$acres, xreg = train_dt[c("year", "monthly_avg_oil_bpd")], lambda = 0)
fit <- auto.arima(train_dt[, "acres"], xreg = train_dt[, c("year", "monthly_avg_oil_bpd")], lambda = 0)
str(train_dt)
fit <- auto.arima(train_ts[, "acres"], xreg = train_ts[, c("year", "monthly_avg_oil_bpd")], lambda = 0)
test_ts <- ts(test_dt)
fcast <- forecast(fit, xreg = test_ts[, c("year", "monthly_avg_oil_bpd")])
autoplot(fcast)
fcast$mean
checkresiduals(fit)
MASS::stepAIC(fit)
nnet_fit <- nnetar(train_ts[, "acres"], xreg = train_ts[, c("year", "monthly_avg_oil_bpd")], lambda = 0)
nnet_fcast <- forecast(nnet_fit, xreg = test_ts[, c("year", "monthly_avg_oil_bpd")])
nnet_fcast <- forecast(nnet_fit, xreg = test_ts[, c("year", "monthly_avg_oil_bpd")], PI = T)
autoplot(nnet_fcast)
d <- read.table("clipboard", row.names = NULL, header = T)
d <- read.table("clipboard", row.names = F, header = T)
d <- read.table("clipboard", header = T)
d <- read.table("clipboard", row.names = NULL, header = T)
d <- read.table("clipboard", row.names = NULL, header = T, sep = "")
d <- read.table("clipboard", row.names = NULL, header = T, sep = "\t")
d
setDT(d)
d
d_ts <- ts(d[, .(time, avg_bpd = `Average.of.barrel_per_day`)], frequency = 12)
d_ts
dn_fit <- nnetar(d_ts[, "avg_bpd"], decay = 0.5, lambda = 0)
dn_fcast <- forecast(dn_fit, h = 60)
autoplot(dn_fcast)
dn_fcast <- forecast(dn_fit, h = 60, PI = T)
autoplot(dn_fcast)
dn_fit <- nnetar(d_ts[, "avg_bpd"], lambda = 0)
dn_fcast <- forecast(dn_fit, h = 60, PI = T)
autoplot(dn_fcast)
dn_fit <- nnetar(d_ts[, "avg_bpd"], decay = 0.5, lambda = 0)
dn_fcast <- forecast(dn_fit, h = 60)
dn_fcast$mean
to_clip(data.table(avg_bpd = dn_fcast$mean))
to_clip(data.table(avg_bpd = dn_fcast$mean))
test_dt <- read.table("clipboard", header = TRUE, row.names = NULL)
fit <- auto.arima(train_ts[, "acres"], xreg = train_ts[, c("year", "monthly_avg_oil_bpd")], lambda = 0)
test_dt
test_ts <- ts(test_dt)
fcast <- forecast(fit, xreg = test_ts[, c("year", "monthly_avg_oil_bpd")])
autoplot(fcast)
AIC(fit)
checkresiduals(fit)
nnet_fit <- nnetar(train_ts[, "acres"], xreg = train_ts[, c("year", "monthly_avg_oil_bpd")], lambda = 0);
nnet_fcast <- forecast(nnet_fit, xreg = test_ts[, c("year", "monthly_avg_oil_bpd")])
nnet_fit <- nnetar(train_ts[, "acres"], xreg = train_ts[, c("year", "monthly_avg_oil_bpd")], lambda = 0);
nnet_fcast <- forecast(nnet_fit, xreg = test_ts[, c("year", "monthly_avg_oil_bpd")], PI = T)
autoplot(nnet_fcast)
nnet_fit <- nnetar(train_ts[, "acres"], xreg = train_ts[, c("year", "monthly_avg_oil_bpd")], lambda = 0, decay = 0.5);
nnet_fcast <- forecast(nnet_fit, xreg = test_ts[, c("year", "monthly_avg_oil_bpd")], PI = T)
autoplot(nnet_fcast)
system("$env:userprofile")
system2("$env:userprofile")
system2("$env:userprofile", stdout = TRUE)
system2("$env:userprofile", stdout = TRUE)
system2("$env:userprofile", stdout = TRUE)
system2("powershell -command $env:userprofile", stdout = TRUE)
system("powershell -command $env:userprofile", stdout = TRUE)
system("powershell -command $env:userprofile")
creds_path <- system("powershell -command $env:userprofile")
creds_path
?system
Sys.getenv("USERPROFILE")
library("glue")
library("httr")
library("jsonlite")
library("data.table")
library("anytime")
to_clip <- function(.data) {
write.table(.data, "clipboard-99999", sep = "\t", row.names = F)
}
user_profile <- Sys.getenv("USERPROFILE")
path_to_key <- file.path(user_profile, "Documents", "Creds", "eia_api_key.txt")
api_key <- read.table(path_to_key)
file.exists(path_to_key)
read.delim(path_to_key)
read.delim(path_to_key, header = FALSE)
read.delim(path_to_key, header = T)
read.delim(path_to_key, header = FALSE, sep = "")
read.delim(path_to_key, header = FALSE, sep = "", dec = ".")
read.char(path_to_key)
readChar(path_to_key)
readChar(path_to_key, file.info(path_to_key)$size)
user_profile <- Sys.getenv("USERPROFILE")
path_to_key <- file.path(user_profile, "Documents", "Creds", "eia_api_key.txt")
file_size <- file.info(path_to_key)$size
api_key <- readChar(path_to_key, file_size)
api_key
library("glue")
library("httr")
library("jsonlite")
library("data.table")
library("anytime")
to_clip <- function(.data) {
write.table(.data, "clipboard-99999", sep = "\t", row.names = F)
}
get_api_key <- function() {
user_profile <- Sys.getenv("USERPROFILE")
path_to_key <- file.path(user_profile, "Documents", "Creds", "eia_api_key.txt")
file_size <- file.info(path_to_key)$size
api_key <- readChar(path_to_key, file_size)
return(api_key)
}
api_key <- get_api_key()
api_url <- "http://api.eia.gov/series/?api_key={api_key}&series_id=PET.MCRFP{state_abb}1.M"
format_eia_url <- function(state_abb) {
glue(api_url, api_key = api_key, state_abb = state_abb)
}
get_eia_response <- function(state_abb) {
url <- format_eia_url(state_abb)
res <- GET(url)
return(res)
}
response_to_json <- function(res) {
json <- fromJSON(rawToChar(res$content))
return(json)
}
json_to_data <- function(json) {
.data <- json$series$data
return(.data)
}
rename_columns <- function(DT) {
old <- names(DT)
.new <- c("date", "barrel")
setnames(DT, old = old, new = .new)
}
all_cols_to_char <- function(DT) {
for (j in names(DT))
set(DT, j = j, value = as.character(DT[[j]]))
}
convert_date_col <- function(DT) {
DT[, date := anydate(date)]
}
format_data <- function(.data) {
setDT(.data)
rename_columns(.data)
all_cols_to_char(.data)
convert_date_col(.data)
}
run <- function(state_abb) {
res <- get_eia_response(state_abb)
json <- response_to_json(res)
.data <- json_to_data(json)
DT <- format_data(.data)
return(DT)
}
state_abb_to_name <- function(state_abb) {
state_name <- toupper(state.name[which(state.abb == state_abb)])
return(state_name)
}
state_abbs <- c("TX", "ND", "SD", "CO", "MT", "NE", "NM", "WY", "PA", "WV", "OH", "NY", "LA", "OK", "AR")
results <- sapply(state_abbs, run, USE.NAMES = TRUE, simplify = F)
DT <- rbindlist(results, use.names = TRUE, idcol = "state_abb")
DT[, state := state_abb_to_name(state_abb), by = .(state_abb)]
DT[, year := year(date)]
setcolorder(DT, c('state_abb', 'state', 'year', 'date', 'barrel'))
DT
str(DT)
DT[, barrel := as.numeric(barrel)]
DT
DT
lubridate::ceiling_date("2021-07-1")
lubridate::ceiling_date("2021-07-01")
lubridate::ceiling_date(as.Date("2021-07-01"))
lubridate::ceiling_date(as.Date("2021-07-01"), unit = "month")
lubridate::ceiling_date(as.Date("2021-07-01"), unit = "month") - 1
lubridate::day(lubridate::ceiling_date(as.Date("2021-07-01"), unit = "month") - 1)
DT
DT[, max_date := max(date)]
DT
DT[, max_date := max(date), by = state]
DT
str(DT)
lubridate::day(lubridate::ceiling_date(as.Date("2021-07-01"), unit = "month") - 1)
library("DBI")
library("odbc")
setClass(
"OdbcConnector",
contains =  "DBIConnector",
slots = c(
.drv = "OdbcDriver",
.conn_args = "list"
),
prototype = list(
.drv = odbc::odbc()
)
)
setClass(
"SQLExpressConnector",
contains = "OdbcConnector",
prototype = list(
.conn_args = list(
Driver = "SQL Server",
Server = "localhost\\sqlexpress",
Database = "master",
Trusted_Connection = TRUE
)
)
)
setClass(
"SQLiteConnector",
contains = "DBIConnector",
slots = c(
.drv = "SQLiteDriver"
),
prototype = list(
.drv = RSQLite::SQLite(),
.conn_args = list(dbname = here("data", "sqlite.db"))
)
)
SQLExpressConnector <- function(...) {
methods::new("SQLExpressConnector")
}
SQLiteConnector <- function(...) {
methods::new("SQLiteConnector")
}
.connector_factories <- list(
"sqlexpress"  = SQLExpressConnector,
"sqlite" = SQLiteConnector
)
ConnectorFactory <- function(id, ...) {
obj <- .connector_factories[[id]]
cnr <- obj(...)
return(cnr)
}
library(here)
library("DBI")
library("odbc")
setClass(
"OdbcConnector",
contains =  "DBIConnector",
slots = c(
.drv = "OdbcDriver",
.conn_args = "list"
),
prototype = list(
.drv = odbc::odbc()
)
)
setClass(
"SQLExpressConnector",
contains = "OdbcConnector",
prototype = list(
.conn_args = list(
Driver = "SQL Server",
Server = "localhost\\sqlexpress",
Database = "master",
Trusted_Connection = TRUE
)
)
)
setClass(
"SQLiteConnector",
contains = "DBIConnector",
slots = c(
.drv = "SQLiteDriver"
),
prototype = list(
.drv = RSQLite::SQLite(),
.conn_args = list(dbname = here("data", "sqlite.db"))
)
)
SQLExpressConnector <- function(...) {
methods::new("SQLExpressConnector")
}
SQLiteConnector <- function(...) {
methods::new("SQLiteConnector")
}
.connector_factories <- list(
"sqlexpress"  = SQLExpressConnector,
"sqlite" = SQLiteConnector
)
ConnectorFactory <- function(id, ...) {
obj <- .connector_factories[[id]]
cnr <- obj(...)
return(cnr)
}
cnr <- ConnectorFactory("sqlexpress")
cnr
conn <- DBI::dbConnect(cnr)
conn
DBI::dbListTables(conn)
conn
DBI::dbDisconnect(conn)
